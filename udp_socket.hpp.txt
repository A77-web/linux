#include<iostream>
#include<string>
#include<unistd.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<sys/socket.h>
class UdpSocket
{
private:
        int _sockfd;//贯穿了上下文，每一个操作都涉及到套接字描述符
public: 
        UdpSocket():sockfd(-1){}
        bool Socket()
        {
                //创建套接字，其中的地址域类型这些都是固定
                _sockfd=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
                if(_sockfd<0)
                {
                        perror("socket error");
                        return false;
                }
                return true;
        }
        bool Bind(const std::string &ip,int port)//绑定地址信息
        {
                struct sockaddr_in addr;
                addr.sin_family=AF_INET;
                addr.sin_port=htons(port);
                addr.sin_addr.s_addr=inet_addr(ip.c_str());
                socklen_t len=sizeof(struct sockaddr_in);
                if(bind(_sockfd,(struct sockaddr*)&addr,len)<0)
                {
                        perror("bind error");
                        return false;
                }
                return true;
        }
        bool Send(const std::string &data,const std::string &ip,int port)
        {
                struct sockaddr_in peeraddr;
                peeraddr.sin_family=AF_INET;
                peeraddr.sin_port=htons(port);
                peeraddr.sin_addr.s_addr=inet_addr(ip.c_str());
                socklen_t len=sizeof(struct sockaddr_in);
                int ret=sendto(_sockfd,&data[0],data.size(),0,(struct sockaddr*)&peeraddr,len);
                if(ret<0)
                {
                        perror("sendto error");
                        return false;
        }
        //客户端实际上是不需要接收服务器地址的，因为他本身就知道
        bool Recv(std::string *buf,std::string *ip=NULL,int *port=NULL)
        {       
                struct sockaddr_in peeraddr;
                socklen_t len=sizeof(struct sockaddr_in);
                char tmp[4096]={0};
                int ret=recvform(_sockfd,tmp,4095,0,(struct sockaddr*)&peeraddr,&len);
                if(ret<0)
                {       
                        perror("recvform error");
                        return false;
                }                //并没有使用赋值操作，因为赋值是字符操作，遇到/0就停止了，但是网络传输什么数据都有可能
                //有可能数据中间就有/0存在，因此不管什么数据直接截取指定的长度
                buf->assign(tmp,ret);//从tmp字符串位置开始截取ret长度的数据到buf中
                
                if(ip!=NULL)*ip=inet_ntoa(peeraddr.sin_addr);
                if(port!=NULL)*port=ntohs(peeraddr.sin_port);
                return true;
        }
        bool Close()
        {
                if(_sockfd>=0)
                close(_sockfd);
                return true;
        }
};
